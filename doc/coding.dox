/* Copyright 2012-2013, Peter A. Bigot
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the software nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*! @page coding BSP430 Coding Style
@tableofcontents

The coding style for BSP430 is primarily the one the author converged to
over the last twenty-five years, but has a few lingering influences from
FreeRTOS.

\section coding_style Indentation and Syntactic Style

BSP430's coding style may be obtained using the following Emacs <a
href="http://cc-mode.sourceforge.net/">ccmode</a> style:

@code
(c-add-style "pab"
	     '("gnu"
	       (indent-tabs-mode . nil)	; No tabs in the source
	       (c-offsets-alist
		(case-label . 2)	; Indent the case labels
		)))
@endcode

An acceptably close approximation can be had using the following <a
href="http://astyle.sourceforge.net/">Artistic Style (astyle)</a> command
line:

@code
astyle \
  --options=none \
  --style=1tbs \
  --indent=spaces=2 \
  --indent-switches \
  --pad-header \
  --max-instatement-indent=60 \
  -r \
    '*.c' \
    '*.h' \
    '*.inc'
@endcode

\section coding_naming Identifiers and Naming Conventions

Care is taken in BSP430 to conform to the rules for C regarding global
identifiers; in particular, underscores may not appear at the start of an
identifier, and certain suffixes like @c _t are reserved.

@li All global symbols and macros encode that they are part of BSP430 by
beginning with @c BSP430 with or without prefix characters that indicate
type information.  The next section of the identifier encodes information
about the BSP430 module to which it belongs.

@li Macros are upper-case, underscore separated.  An exception is made for
configuration macros which have a prefixed lower-case @c config.

@li Function names are intercapped.  An initial letter indicates the return
type:  @c i is used for @c int, @c ul for <c>unsigned long</c>, @c v for @c
void, and @c h for a @HAL handle.  The letter @c x is used as a prefix for
more complex types, such as <c>const char *</c>.

@li Type names (tags and typedefs) are intercapped.  An initial letter
distinguishes the "type" of type: @c s is a @c struct, @c u is a @c union,
@c e is an @c enum.  @c h indicates a handle for (pointer to) a @HAL
structure type; for example #hBSP430halSERIAL is a typedef for a pointer to
#sBSP430halSERIAL.  @c t is used for any typedef for a normal type, such as
#tBSP430periphHandle.

@li Where user code may define or reference instances of a BSP430 @c struct,
@c union, and @c enum type directly (i.e. not through a handle), those types
should have typedef aliases that use the tag as the type name.

@li Enumeration values are intercapped and begin with @c e.

@li A concept of "protected" is indicated by a single trailing underscore.
Generally this is used in macro parameters and for static storage class
variables that should not be referenced outside the implementation.

@li The extremely rare global variables follow the general convention of
function names.  Most of these variables are marked as protected.

@li Function parameters, structure/union member tags, local variables, and
and file static variables should be lower case, underscore separated.  These
identifiers do not encode type information.

@li Where a function or value has an associated physical unit that is
required for correct interpretation of the value, that should be expressed
as an underscore-separated suffix consistent with the <a
href="http://unitsofmeasure.org/">Unified Code for Units of Measure</a>.  As
an example, all BSP430 frequency values are annotated with the suffix @c
_Hz.

@li Where a function, function macro, or structure tag must be manipulated
with interrupts disabled, it ends with a suffix @c _ni (@c _NI for macros).

\section coding_types Type Selection

Except where a data type is used as part of an interface to an external
system or to reflect a specific intent, native types are used.

@li @c int is the native type.  Anybody using an MSP430 should know that
this is a 16-bit value.

@li <c>unsigned int</c> is the type for any 16-bit peripheral registers.

@li <c>unsigned char</c> is the type for any 8-bit peripheral registers.

@li ASCII text characters and strings use @c char as the core type.

@li Data transmitted to and from an external system using the @link
bsp430/serial.h serial abstraction@endlink uses @c uint8_t as codified in
<c><stdint.h></c>.

@li Any parameter that is a pointer to data the function is expected not to
modify should include the appropriate @c const qualifier.

\section coding_misc Miscellaneous

\subsection coding_misc_yoda Comparison Operands

BSP430 places comparison operands which are lvalues on the right side of the
operator, as with:

@code
if (4 <= len) {
  /* Too long */
}
@endcode

Yes, even if the conditional operator "couldn't possibly be mistyped" as an
assignment operator.  <a
href="http://www.dodgycoder.net/2011/11/yoda-conditions-pokemon-exception.html">Up
with it you must put.</a>

\subsection coding_misc_rv Function Return Values

Where a function implements an operation that may succeed or fail, that
state reflected in the return value following standard POSIX conventions: a
zero indicates a successful execution and a negative value indicates an
error.  Where useful information about a successful result may be expressed
as a non-negative value (e.g., the number of bytes successfully
transmitted), that may be included in the return value.

This is often counter-intuitive to programmers unfamiliar with POSIX, but
the correct test to see whether the I2C addresses were successfully set is
indeed:

@code
  if (0 == iBSP430serialI2CsetAddresses_ni(i2c, oa, sa)) {
    /* Success here... */
  }
@endcode

\subsection coding_misc_incl Include Files

Include file protection symbols encode the path by which the include
file is normally accessed; e.g. the protection sequence for
<bsp430/platform/exp430fr5739/platform.h> is:

@code
#ifndef BSP430_PLATFORM_EXP430FR5739_PLATFORM_H
#define BSP430_PLATFORM_EXP430FR5739_PLATFORM_H
/* ... */
#endif /* BSP430_PLATFORM_EXP430FR5739_PLATFORM_H */
@endcode

\subsection coding_misc_cpp Preprocessor Feature Tests

See also @ref bsp430_config for naming conventions and standards related to
feature tests.

Where a macro value is used for conditional compilation, the state of
being true is determined with the following pattern:

@code
#if FEATURE_FLAG - 0
/* Feature is enabled */
#else /* MACRO_VALUE */
/* Feature is not enabled */
#endif /* MACRO_VALUE */
@endcode

This technique allows use of:

@code
#define FEATURE_FLAG 0
@endcode

to denote that the feature is being explicitly disabled.  BSP430 should
ensure that any feature test flag has a definition to either 1 or 0 (or to
an expression that will evaluate to either a true or false value when used
within a preprocessor condition).  The documentation explicitly marks macro
definitions that are expected to have such values with the following
annotation:

@cppflag

The ability to explicitly disable features that default to being enabled is
critical and requires a value-based comparison.  The subtraction of 0 in the
conditional expression allows syntactic correctness when somebody
inappropriately defines the feature flag with no value: such a case is
equivalent to setting it false.  The syntax also makes clear that the code
was not intended to be <c>\#ifdef FEATURE_FLAG</c>.

@warning When features identified with null macro definitions are processed
according to the BSP430 standard conditional directives, they are
interpreted as being turned off, not on.

A common practice, followed by Texas Instruments in their standard MSP430
MCU-specific headers, is to use code like:

@code
#define __MSP430_HAS_USCI_B0__
@endcode

with a null expansion to the macro.  Here is simply the existence of a
definition, not its value, that indicates feature is present.

The correct way of detecting features when interoperating with external
libraries using the null-definition style is:

@code
#if defined(__MSP430_HAS_USCI_B0__) && (configBSP430_HAL_USCI_B0 - 0)
/* Function is available and feature is enabled */
#else /* USCI_B0 */
/* Function is missing or feature is disabled */
#endif /* USCI_B0 */
@endcode

The short-hand <c>\#ifdef</c> may be used instead of the <c>defined()</c>
test if no further conditions are required, but is discouraged for
consistency.

In a very few cases, a @c configFEATURE_FOO flag is a request to supply a
specific resource such as @c BSP430_FOO_PERIPH_HANDLE.  If the platform is
unable to provide the resource, it will leave the handle macro undefined
When there is no independent reason also define a @c FEATURE_FOO flag,
success of the configuration request should be tested by:

@code
#if defined(BSP430_FOO_PERIPH_HANDLE)
#endif /* FOO */
@endcode

The documentation for @c configFEATURE_FOO and @c BSP430_FOO_PERIPH_HANDLE
will indicate when this alternative success test should being used.

\section coding_doc Documentation Expectations

BSP430 uses Doxygen for architectural and API documentation.  The following
macros are used in API documentation to highlight expectations of particular
macros, variables, and functions.

\subsection coding_doc_defaulted @@defaulted

Annotation to indicate that the value provided by the infrastructure may be
overridden by an application.  The overriding value is normally provided
through @c bsp430_config.h.  Example: #BSP430_CLOCK_NOMINAL_MCLK_HZ

Produces:

@defaulted

\subsection coding_doc_dependentvalue @@dependentvalue

Annotation to highlight that the value provided by the infrastructure is
dependent on other settings in a complex manner.  Normally used for
configuration flags for dependent features.  Example:
#configBSP430_UPTIME_TIMER_HAL_CC0_ISR.

Produces:

@dependentvalue

\subsection coding_doc_platformvalue @@platformvalue

Annotation to indicate that the macro is only defined after
<bsp430/platform.h> is included, and that the value of the macro is
platform-dependent.  This may be combined with @ref coding_doc_defaulted if
the value may be overridden.  Example: #BSP430_CLOCK_LFXT1_XCAP

Produces:

@platformvalue

\subsection coding_doc_platformdep @@platformdep

Annotation to indicate that the value of the macro depends on platform
information (such as the type of peripheral providing the clock
abstraction), so the value displayed in the documentation may not be
correct.  This may or may not be combined with @ref coding_doc_defaulted.
Example: #BSP430_CLOCK_IS_FAULTED_NI

Produces:

@platformdep

\subsection coding_doc_deprecated @@deprecated

Annotation to note that a function or capability has been superseded by an
alternative that should be used in new code.  Such annotations @em should
indicate a date by which the deprecated capability may be expected to be
removed.

Produces:

@deprecated

\subsection coding_doc_affects @@affects

Annotation to note that the setting for the given macro affects one or more
other settings.  Normally used for @c configBSP430_FOO which determines the
value of @c BSP430_FOO which uses the companion @ref coding_doc_dependency
annotation.  Example: #configBSP430_PLATFORM_SPIN_FOR_JUMPER

Produces:

@affects <em>resource links</em>

\subsection coding_doc_affects @@dependency

Annotation to note that the setting for the given macro is affected by the
one or more other settings.  Normally used for @c BSP430_FOO when the value
depends on @c configBSP430_FOO which uses the companion @ref
coding_doc_affects annotation.  Example: #BSP430_PLATFORM_SPIN_FOR_JUMPER

Produces:

@dependency <em>resource links</em>

\subsection coding_doc_cppflag @@cppflag

Annotation to indicate that the value of a macro may include preprocessor
operations such as <tt>defined(BSP430_FOO)</tt>, so may be used only within
preprocessor directives.  Example: #configBSP430_HAL_PORT1_ISR

Produces:

@cppflag

\subsection coding_doc_blocking @@blocking

Annotation to indicate that a function that normally runs with interrupts
disabled may enable interrupts and block until conditions allow it to
return.  Example: iBSP430consoleWaitForTxSpace_ni()

@todo This should be reflected in the function name when the
non-interruptable and resource lock frameworks are revised.

Produces:

@blocking

\subsection coding_doc_consoleoutput @@consoleoutput

Annotation to indicate that the function may enable interrupts and block due
to an internal dependence on iBSP430consoleWaitForTxSpace_ni().  Example:
cputchar_ni()

Produces:

@consoleoutput

@copyright_doc
*/
