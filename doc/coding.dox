/*! \page coding_p BSP430 Coding Style

\section coding BSP430 Coding Standard and Style Guide

As BSP430 is intended as a library for use with <a
href="http://www.freertos.org">FreeRTOS</a>, the code style attempts to
follow the <a
href="http://www.freertos.org/FreeRTOS-Coding-Standard-and-Style-Guide.html">FreeRTOS
Coding Standard and Style Guide</a>.  The attempt is best-effort, with
several intentional deviations:

<ul>

<li>The C standard type corresponding to the native word size of the MSP430
is @c int, as it is for many platforms.  The type @c int (<tt>unsigned
int</tt>) will often be used in lieu of @c portBASE_TYPE.  A prefix
character @e i shall be used in lieu of @e x in function names.

<li>While the FreeRTOS variant of <a
href="http://en.wikipedia.org/wiki/Hungarian_notation">Systems Hungarian</a>
is used for global type and function names and for parameters in function
declarations, it is not used in implementation or in internal structures.

<li>Function names comprise the encoding of return type, the identifier @c
BSP430, a lowercase module identifier such as @c usci, followed by a
camel-case initial-capital suffix reflecting the function purpose.

</ul>

The use of tab characters instead of spaces, with a non-standard spacing of
four positions for tables, is retained (regrettably).

5xx/6xx-family devices are identified by checking for
defined(__MSP430_HAS_MSP430XV2_CPU__).


header: periph/%(periph)s.h
multiple include protection: BSP430_PERIPH_%(PERIPH)s_H

Instance-specific HPL support: configBSP430_HPL_%(INSTANCE)s
Instance-specific HAL support: configBSP430_HAL_%(INSTANCE)s
Instance-specific HAL ISR: configBSP430_HAL_%(INSTANCE)s_ISR

peripheral instance handles: BSP430_PERIPH_%(INSTANCE)s
HPL inline pointer: BSP430_HPL_%(INSTANCE)s
HPL variable pointer: xBSP430periph%(INSTANCE)s
HAL handle: xBSP430%(periph)s%(INSTANCE)s

FreeRTOS HAL state structure: struct xBSP430%(periph)sState
FreeRTOS HAL handle type: typedef struct xBSP430%(periph)sState * xBSP430%(periph)sHandle
FreeRTOS HAL handle global: extern xBSP430%(periph)sHandle const xBSP430%(periph)_%(INSTANCE)

FreeRTOS HAL configuration structure: struct xBSP430%(periph)sConfig

Pattern for platform-specific features:

configBSP430_MODULE_FEATURE -- in module.h header, serves to request
feature, default to 0

configBSP430_MODULE_USE_DEFAULT_FEATURE_RESOURCES -- in module.h header,
default to (configBSP430_MODULE_FEATURE - 0)

BSP430_MODULE_FEATURE -- documented in module.h header, used in application
code to determine whether feature was enabled, @nodefault, @dependency
<bsp430/platform.h>

BSP430_MODULE_FEATURE_ATTRIBUTES -- as needed, documented in module.h
header, @nodefault, @dependency <bsp430/platform.h>

BSP430_MODULE_FEATURE_ATTRIBUTES -- defined in (specific) platform.h under
test:
#if ((configBSP430_MODULE_FEATURE - 0) \
     && ((! defined(configBSP430_MODULE_USE_DEFAULT_FEATURE_RESOURCES)) \
        || (configBSP430_MODULE_USE_DEFAULT_FEATURE_RESOURCES - 0)))
/** Defined only if #configBSP430_MODULE_USE_DEFAULT_FEATURE_RESOURCE. @defaulted */
#define BSP430_MODULE_FEATURE_ATTRIBUTES whatever
#endif /* configBSP430_MODULE_FEATURE && need default */

If the feature attributes introduce a dependency on a specific peripheral,
default to enabling that peripheral with:

configBSP430_PERIPH_WHATEVER -- defined in (specific) platform bsp430_config.h
under test:
#if ((configBSP430_MODULE_FEATURE - 0) \
     && ((! defined(configBSP430_MODULE_USE_DEFAULT_FEATURE_RESOURCES)) \
        || (configBSP430_MODULE_USE_DEFAULT_FEATURE_RESOURCES - 0)))
#if !defined(configBSP430_PERIPH_WHATEVER)
#define configBSP430_PERIPH_WHATEVER 1
#endif /* configBSP430_PERIPH_WHATEVER */
#endif /* configBSP430_MODULE_FEATURE && need default */

*/
