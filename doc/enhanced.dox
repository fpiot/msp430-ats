/* Copyright 2012-2013, Peter A. Bigot
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the software nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/** \page enhanced Watchdogs, LPM, Interrupts, and All That
@tableofcontents

\section enh_watchdog Watchdog Support

BSP430 is implemented to support having the watchdog timer enabled from the
moment the chip receives power.

Defining #configBSP430_CORE_SUPPORT_WATCHDOG to a true value will cause
#BSP430_CORE_WATCHDOG_CLEAR() to reload the watchdog with a reset value each
time it is executed.  It will also cause #BSP430_CORE_DELAY_CYCLES() to do
so at least once every #BSP430_CORE_WATCHDOG_MAX_DELAY_CYCLES MCLK ticks.

For convenience, the default value of #configBSP430_CORE_SUPPORT_WATCHDOG is
false, which causes #BSP430_PLATFORM_BOOT_DISABLE_WATCHDOG to default to
true, and the watchdog will be disabled as the first action taken by
vBSP430platformInitialize_ni().

Where BSP430 provides a function that might execute for more than 30
milliseconds at 1 MHz, it will internally invoke
#BSP430_CORE_WATCHDOG_CLEAR() at least once every 30 milliseconds
(potentially more frequently if so configured by
#BSP430_CORE_WATCHDOG_MAX_DELAY_CYCLES).  Otherwise application code is
responsible for clearing the watchdog.

There is no penalty for using #BSP430_CORE_WATCHDOG_CLEAR() and
#BSP430_CORE_DELAY_CYCLES() when the watchdog is disabled.

BSP430 currently does not provide infrastructure abstracting the watchdog
timer as an interval timer.  You are, of course, free to use it in such a
way so long as you do not enable #configBSP430_CORE_SUPPORT_WATCHDOG.

\section enh_lpm Low Power Mode

As the intrinsics used to enter and leave low power mode are not entirely
consistent across MSP430 toolchains, BSP430 provides several macros to
assist with this.

#BSP430_CORE_LPM_ENTER(@c lpm_bits) places the CPU into a low power mode as
specified by @c lpm_bits.  The bits are the same ones that are normally used
in @c \__bis_status_register() in MSPGCC, but BSP430 will mask them using
#BSP430_CORE_LPM_SR_MASK to ensure that other bits are not set.  Use this
macro when entering a low-power mode from a state where interrupts are
currently enabled.

#BSP430_CORE_LPM_ENTER_NI(@c lpm_bits) is similar but enables #GIE prior to
entering low-power mode, so that the CPU can be awoken by actions taken
while processing an interrupt.  Be aware that under normal circumstances
interrupts will be enabled when this "call" completes (see
#configBSP430_CORE_LPM_EXIT_CLEAR_GIE for unusual circumstances).

#BSP430_CORE_LPM_EXIT_FROM_ISR(@c lpm_bits) serves as an abstraction of @c
\__bic_status_tegister_on_exit() in MSPGCC, again filtering the bits for
validity.

The flag #BSP430_CORE_LPM_LPMXp5 is defined as a way of consistently
representing a desire to enter the ultra-low-power LPMx.5 modes.  The macros
above do not examine this bit; see #BSP430_PMM_ENTER_LPMXp5_NI() and the
@link ex_bootstrap_applpm application LPM example@endlink for a
demonstration of how to enter these modes on MCUs that support them.

\section enh_interrupts Interrupts and Critical Sections

BSP430 provides several function macros that support interrupt management in
a toolchain-independent manner.  A core promise of BSP430 is that BSP430 it
will preserve the application interrupt state over API calls unless
specifically documented to do otherwise.  In turn, the application is
expected to not enable interrupts within an interrupt handler callback,
though this can be done if the callback protects against reentrancy and
ensures the interrupts are disabled again before returning.

Recall that on a power-up-clear ("PUC", i.e. any reset condition), the
status register is reset, meaning that all interrupts are disabled when
<c>main()</c> begins executing.  If the application wishes to accept
interrupts, it must explicitly enable them after configuration is complete.

\anchor suffix_ni

\subsection enh_interrupts_ni The _ni "not interrupt-able" suffix

Several function and structure field names have a suffix @c _ni.  This
indicates that the function or field is intended to be called or manipulated
in a context where interrupts are disabled.  Cases where the @c _ni suffix
is required include:

@li Manipulation of peripheral registers related to clocks and timers where
interrupts might change the state of the system;

@li Actions with precise timing requirements that will not work if an
interrupt introduces a delay;

@li Manipulation (including traversal) of linked lists that may be invoked
in interrupts, as in @ref callback_chains.

Functions that do not have the @c _ni suffix are either considered to be
robust in the presence of interrupts, or will temporarily disable them in a
critical section prior to restoring the incoming interrupt state before
returning.  In certain cases, structure fields with the @c _ni suffix may be
atomically compared with @c NULL, but not manipulated; these cases are noted
within the documentation for the field.  Structure fields and variables that
do not have the @c _ni suffix may be accessed without concern for interrupt
being enabled or disabled.

\note The @c _ni suffix should not be overused.  See \ref enh_interrupts_rh
for an alternative that has less impact on responsiveness.

\warning Failure to disable interrupts prior to invoking functions with the
@c _ni suffix may result in non-deterministic behavior including application
lockup.

\warning The @c _ni suffix does not guarantee that the function will not
enable interrupts internally if its operation requires waiting for some
condition.  It only guarantees that, if this happens, they will be disabled
again when the function returns.  Any function (with or without an @c _ni
suffix) that could enable interrupts should clearly state this in its
description using the @ref coding_doc_blocking and/or @ref
coding_doc_consoleoutput attributes.

\note Where both @c _rh and @c _ni apply the combined suffix @c _rh_ni
should be used.

\anchor suffix_rh

\subsection enh_interrupts_rh The _rh "resource held" suffix

The @c _rh suffix is used to indicate functions that manipulate a particular
resource in a way that must be safe from simultaneous access, but is not
sensitive to unrelated interrupts.  Cases where the @c _rh suffix is
required include:

@li @link bsp430/serial.h Serial communications@endlink (SPI, I2C, UART)
where the peripheral clock management ensures correct transfer even in the
presence of unrelated interrupts, but attempts to reconfigure the peripheral
or use it for another activity would result in errors;

The <bsp430/resource.h> infrastructure may be used to prevent of undesired
concurrent access in many situations that involve <em>resource held</em>
functions, even if accessed from an interrupt handler.  When resources are
used for a HAL structure (e.g. #BSP430_SERIAL_ENABLE_RESOURCE) all fields in
the structure should be manipulated only when the resource is held by the
subsystem that is accessing it.

The documentation for functions that require resources should use @ref
coding_doc_resource.

\note Where both @c _rh and @c _ni apply the combined suffix @c _rh_ni
should be used.

\subsection enh_interrupts_eint Unconditionally Enabling and Disabling Interrupts

The function macro #BSP430_CORE_ENABLE_INTERRUPT() will invoke the toolchain
intrinsic to enable interrupts by setting the #GIE bit in the MSP430 status
register.

The function macro #BSP430_CORE_DISABLE_INTERRUPT() will invoke the
toolchain intrinsic to disable interrupts by clearing the #GIE bit in the
MSP430 status register.

These function macros include any necessary workarounds for MCU design
"features" and errata that can result in interrupts being executed in the
following instruction, such as the documented need for a @c NOP instruction
after a @c DINT, and similar need after @c EINT when erratum CPU42 affects
the MCU.

\subsection enh_interrupts_csect Creating Critical Sections

Critical sections may be implemented by saving the current interrupt state,
disabling interrupts, performing the critical operations, then restoring
interrupt state.  The recommended pattern for this is:

@code
  BSP430_CORE_SAVED_INTERRUPT_STATE(istate);
  int rv;

  /* ... */
  /* non-critical code */
  BSP430_CORE_DISABLE_INTERRUPT();
  rv = 0; /* assume success */
  do {
    /* critical code */
    if (something_went_wrong) {
      rv = -1; /* error */
      break;
    }
    /* more critical code */
  } while (0);
  BSP430_CORE_RESTORE_INTERRUPT_STATE(istate);
  if (0 != rv) {
    /* handle failure from critical section */
  }
  /* non-critical code */
@endcode

See the @link ex_bootstrap_button button example@endlink for an interesting
application architecture that leaves interrupts disabled at all times that
the MCU is active, simplifying the application logic by eliminating
non-deterministic signals.

\section enh_resources Resource Management

The bsp430/resource.h header provides data structures and functions that
support safe access to shared resources when using functions with the @link
enh_interrupts_rh _rh suffix@endlink.

\section enh_arch Application Architecture

The choice of application architecture is up to the implementer; BSP430 is
intended to support all but the most contorted architectures.  Pure examples
of two standard solutions that it should support are described in this
section.

\subsection enh_arch_isr Interrupt-Driven

@code
static int
callback (/* ... */)
{
  /* ... */
  return 0; /* Return without waking */
}

void main (/* ... */)
{
  /* Initialization */
  while (1) { /* Gratuitous loop in case of error */
    BSP430_CORE_LPM_ENTER_NI(LPM0_bits);
  }
}
@endcode

Features of the interrupt-only architecture:

@li Interrupts are never enabled while the CPU is in active mode, only while
in low-power mode entered through #BSP430_CORE_LPM_ENTER_NI();

@li Interrupt handlers never invoke @c __bic_status_register_on_exit() to
clear LPM flags and waking the CPU on completion;

@li Events are handled in strict order of delivery, which is controlled by
timing and MCU-specific interrupt priority;

@li If processing a particular event takes too long, subsequent events may
be lost because they were not handled in a timely manner;

@li Synchronizing on events ("join") is more difficult since logic must be
placed in (functions invoked from) multiple ISRs;

\subsection enh_arch_superloop Super Loop

@code

typedef unsigned int tEventSet;
volatile tEventSet events_ni;
/* ... */
static int
callback (/* ... */)
{
  /* ... */
  events_ni |= EVT_FLAG;
  return BSP430_HAL_ISR_CALLBACK_EXIT_LPM;
}

void main (void)
{
  tEventSet events;
  /* Initialization with interrupts disabled, including setting up callback */
  BSP430_CORE_ENABLE_INTERRUPT();
  /* Initialization with interrupts enabled. */
  while (1) { /* Super Loop */
    BSP430_CORE_DISABLE_INTERRUPT();
    /* Record and reset current event set */
    events = events_ni;
    events_ni = 0;
    if (! events) {
      /* Sleep with interrupts enabled until events occur */
      BSP430_CORE_LPM_ENTER_NI(LPM0_bits);
      /* Interrupts enabled during sleep and normally enabled when wakeup.
       * Restart at loop top to check events again */
      continue;
    }
    /* Other preparation with interrupts disabled */
    BSP430_CORE_ENABLE_INTERRUPT();
    /* Process events */
  }
}
@endcode

Features of this architecture:

@li Interrupts are enabled most of the time, whether in low-power mode or
while actively processing;

@li Events are less likely to be lost because interrupts are enabled even
when CPU is active;

@li Interrupt handlers (callbacks) need only wake the processor if the event
they process requires complex calculation or synchronization;

@li The application can prioritize the events it captures, overriding MCU
priorities if necessary;

As a special case, the super loop architecture can be supported while
retaining the strict priority of the interrupt-driven architecture by using
#configBSP430_CORE_LPM_EXIT_CLEAR_GIE to so that when
#BSP430_CORE_LPM_ENTER_NI() returns interrupts remain disabled.  This
architecture never leaves interrupts enabled while the CPU is active, but
still allows event processing to be prioritized relative to other activity.

@copyright_doc
*/
