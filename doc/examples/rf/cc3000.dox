/* Copyright 2012-2013, Peter A. Bigot
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the software nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/** \page ex_rf_cc3000 CC3000 SimpleLink Exploration

This example is a fairly complex program demonstrating the basic goal that
drove BSP430 development: the ability to quickly develop tools to explore
new capabilities in an interactive fashion without being tied to a
particular MSP430 product line or board, and to abstract the capabilities as
modules that could be used in other applications.

The <a
href="http://processors.wiki.ti.com/index.php/CC3000_Wi-Fi_for_MCU">Texas
Instruments SimpleLink(TM) CC3000 Wi-Fi SOC</a> is a solution intended to
enable microcontrollers to communicate over 802.11 Wi-Fi networks.  It is
available in RF evaluation module form-factor, and comes with example
programs from Texas Instruments that are mostly tested only on the <a
href="http://www.ti.com/tool/msp-exp430fr5739">MSP-EXP430FR5739
"Fraunchpad"</a>.

The example here uses the TI-provided host driver with a BSP430 SPI
interface to provide an interactive program to invoke various capabilities
of the SimpleLink hardware.  The Fraunchpad has extremely limited
memory (16 kB including the space used for the packet buffers) and simply
can't support an interactive application with extensive text help and
command processing.  It's close, though; this application takes slightly
more than 20 kB when compiled with <a
href="https://sourceforge.net/projects/mspgcc/">MSPGCC</a> for the <a
href="http://www.ti.com/tool/msp-exp430f5438">MSP-EXP430F5438</a>.

Below are the commands supported:
@verbatim
> help
help # No help available
info # No help available
  load # load wlan AP params from INFO_B
  erase # erase INFO_B
  store # store wlan AP params in INFO_B
nvmem # No help available
  mac # get mac address
  read fileid [len(=128) [ofs(=0)]] # read block from nvmem file
  sp # read firmware service pack level
wlan # No help available
  start # power-up CC3000
  status # get CC3000 status and AP config
  connect # connect to specified access point using AP config
  sectype [{sectype}] # Display or set AP sectype
  passphrase [{passphrase}] # Display or set AP passphrase
  ssid [{ssid}] # Display or set AP SSID for connect
  ipconfig # show IP parameters
  disconnect # disconnect from AP
  stop # shut down CC3000
@endverbatim

A demonstration boot sequence with a couple commands is:
@verbatim
WLAN test program
System reset bitmask 4; causes:
        RST/NMI
System reset included: BOR POR PUC
PWR_EN at PORT1.7
SPI_IRQ HAL at PORT1.3
CSn HAL at PORT3.0
SPI is USCI5_B0
SPI Pins: MOSI/SDA=P3.1; MISO/SCL=P3.2; CLK=P3.3; STE=P3.0
Oct  2 2012 13:43:22
 0:00.771 Initialize returned 0
And wlan has been started.
AP configuration SSID 'myssid', passphrase 'mypassphrase'
AP security type wpa (2)
WLAN status 0: disconnected
> wla co
connect to ssid 'myssid' by wpa using 'mypassphrase'
con 0 in  0:06.365
 0:12.506 wlan_cb 0x8200 0 at 0 SR 0x1
>  0:13.220 wlan_cb 0x8001 0 at 0 SR 0x1
 0:22.306 wlan_cb 0x8010 20 at 0x5bbe SR 0
 0:22.487 wlan_cb 0x8200 0 at 0 SR 0x1
w ip
IP: 192.168.0.101
NM: 255.255.255.0
GW: 192.168.0.1
DHCP: 192.168.0.1
DNS: 192.168.0.1
MAC: 00.25.ca.02.09.9d
SSID: myssid
>  0:32.486 wlan_cb 0x8200 0 at 0 SR 0x1
@endverbatim

Note that asynchronous callbacks from the host driver are displayed
interspersed with the commands, and that in this case the AP configuration
parameters had been stored in information memory and reloaded on power-up.

Experience while reaching this point revealed that the SimpleLink solution
is too immature for serious development, and it is unlikely that the example
will be evolved further.  Nonetheless, it's a good demonstration of BSP430's
capabilities.

To build the program, you will need a copy of the CC3000 Host Driver.  This
application uses one that has been repackaged to place header files out of
the application namespace, support MSPGCC, fix a few bugs, and support
building as a library that can be linked into an application.  It can be
obtained from: http://github.com/pabigot/cc3000

\section ex_rf_cc3000_spi cc3000spi.c

The CC3000 Host Driver library is independent of the underlying interface
via SPI.  A demonstration interface for specific MSP430 processors is part
of the TI example programs, but it is rather confusing and has
board-specific material tightly integrated.

The file below bridges between the host driver and BSP430's serial
abstraction following the specfication at the <a
href="http://processors.wiki.ti.com/index.php/CC3000_Host_Driver_Porting_Guide">CC3000
Host Driver Porting Guide</a>.

\include rf/cc3000/cc3000spi.c

\section ex_rf_cc3000_main main.c

The bulk of the application is taken up with bridge code that interprets
user input and invokes CC3000 host API calls.  It is mostly of interest in
that it demonstrates how to arrange command definitions so they can be
easily included/excluded based on available memory.

\include rf/cc3000/main.c

\section ex_rf_cc3000_config bsp430_config.h
\include rf/cc3000/bsp430_config.h

\section ex_rf_cc3000_make Makefile
\include rf/cc3000/Makefile

\example rf/cc3000/main.c
*/
