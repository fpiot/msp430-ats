#!/usr/bin/env python
#
# Hack utility to show the relationship from a boosterpack in a
# platform to MCU functional capabilities.
#
# Use this to quickly discover things like the fact the Fraunchpad
# doesn't align with RF boosterpacks.

import sys
import os
import os.path

sys.path.append(os.path.join(os.environ['BSP430_ROOT'], 'maintainer', 'lib', 'python'))
import bsp430.pinmap

#rfem = None
rfem ='cc3000em'
#boosterpack = 'cc3000boost'
boosterpack = 'senshub'
platform = 'exp430f5529lp'
mcu = 'msp430f5529'

maps = []

if rfem is not None:
    m = bsp430.pinmap.GenerateMap('rfem', rfem)
    #m = dict([(v,k) for (k,v) in m.iteritems()])
    maps.append(m)

if boosterpack is not None:
    m = bsp430.pinmap.GenerateMap('boosterpack', boosterpack)
    m = dict([(v,k) for (k,v) in m.iteritems()])
    maps.append(m)

if platform is not None:
    m = bsp430.pinmap.GenerateMap('platform', platform)
    maps.append(m)

if mcu is not None:
    m = {}
    for ln in bsp430.pinmap.GenerateLines('mcu', mcu):
        elts = ln.split()
        pin = bsp430.pinmap.CreateInstance(elts.pop(0))
        if pin is None:
            continue
        m[pin] = list(map(bsp430.pinmap.CreateInstance, elts))
    maps.append(m)

for hdr in sorted(maps[0].keys()):
    line = [str(hdr)]
    for m in maps:
        if hdr is None:
            break
        pin = m.get(hdr)
        if pin is None:
            line.append('-')
            break
        try:
            line.extend(map(str, pin))
            hdr = None
        except TypeError:
            line.append(str(pin))
            hdr = pin
    print('\t'.join(line))
    '''
    pin = p.get(hdr)
    mv = m.get(pin)
    if mv is None:
        mvs = '-'
    else:
        mvs = '\t'.join(map(str, mv))
    print('{}\t{}\t{}'.format(hdr, pin, mvs))
    '''

# Local Variables:
# mode: python
# End:
